*todo-comments.txt*        For NVIM v0.5.0        Last change: 2022 October 13

==============================================================================
Table of Contents                            *todo-comments-table-of-contents*

1. ‚úÖ Todo Comments                         |todo-comments-‚úÖ-todo-comments|
  - ‚ú® Features                                  |todo-comments-‚ú®-features|
  - ‚ö°Ô∏è Requirements                    |todo-comments-‚ö°Ô∏è-requirements|
  - üì¶ Installation                        |todo-comments-üì¶-installation|
  - ‚öôÔ∏è Configuration                  |todo-comments-‚öôÔ∏è-configuration|
  - üöÄ Usage                                      |todo-comments-üöÄ-usage|

==============================================================================
1. ‚úÖ Todo Comments                         *todo-comments-‚úÖ-todo-comments*

**todo-comments** is a lua plugin for Neovim 0.5 to highlight and search for
todo comments like `TODO`, `HACK`, `BUG` in your code base.

<div class="figure">
<img src="https://user-images.githubusercontent.com/292349/118135272-ad21e980-b3b7-11eb-881c-e45a4a3d6192.png" title="fig:"/>
<p class="caption">image</p>
</div>

‚ú® FEATURES                                      *todo-comments-‚ú®-features*


- **highlight** your todo comments in different styles
- optionally only highlights todos in comments using **TreeSitter**
- configurable **signs**
- open todos in a **quickfix** list
- open todos in Trouble <https://github.com/folke/trouble.nvim>
- search todos with Telescope <https://github.com/nvim-telescope/telescope.nvim>


‚ö°Ô∏è REQUIREMENTS                        *todo-comments-‚ö°Ô∏è-requirements*


- Neovim >= 0.5.0
- a patched font <https://www.nerdfonts.com/> for the icons, or change them to simple ASCII characters
- optional:
    - ripgrep <https://github.com/BurntSushi/ripgrep> and plenary.nvim <https://github.com/nvim-lua/plenary.nvim> are used for searching.
    - Trouble <https://github.com/folke/trouble.nvim>
    - Telescope <https://github.com/nvim-telescope/telescope.nvim>


üì¶ INSTALLATION                            *todo-comments-üì¶-installation*

Install the plugin with your preferred package manager:

PACKER <HTTPS://GITHUB.COM/WBTHOMASON/PACKER.NVIM> ~

>
    -- Lua
    use {
      "folke/todo-comments.nvim",
      requires = "nvim-lua/plenary.nvim",
      config = function()
        require("todo-comments").setup {
          -- your configuration comes here
          -- or leave it empty to use the default settings
          -- refer to the configuration section below
        }
      end
    }
<


VIM-PLUG <HTTPS://GITHUB.COM/JUNEGUNN/VIM-PLUG> ~

>
    " Vim Script
    Plug 'nvim-lua/plenary.nvim'
    Plug 'folke/todo-comments.nvim'
    
    lua << EOF
      require("todo-comments").setup {
        -- your configuration comes here
        -- or leave it empty to use the default settings
        -- refer to the configuration section below
      }
    EOF
<


‚öôÔ∏è CONFIGURATION                      *todo-comments-‚öôÔ∏è-configuration*

Todo comes with the following defaults:

>
    {
      signs = true, -- show icons in the signs column
      sign_priority = 8, -- sign priority
      -- keywords recognized as todo comments
      keywords = {
        FIX = {
          icon = "ÔÜà ", -- icon used for the sign, and in search results
          color = "error", -- can be a hex color, or a named color (see below)
          alt = { "FIXME", "BUG", "FIXIT", "ISSUE" }, -- a set of other keywords that all map to this FIX keywords
          -- signs = false, -- configure signs for some keywords individually
        },
        TODO = { icon = "ÔÄå ", color = "info" },
        HACK = { icon = "Ôíê ", color = "warning" },
        WARN = { icon = "ÔÅ± ", color = "warning", alt = { "WARNING", "XXX" } },
        PERF = { icon = "Ôôë ", alt = { "OPTIM", "PERFORMANCE", "OPTIMIZE" } },
        NOTE = { icon = "Ô°ß ", color = "hint", alt = { "INFO" } },
        TEST = { icon = "‚è≤ ", color = "test", alt = { "TESTING", "PASSED", "FAILED" } },
      },
      gui_style = {
        fg = "NONE", -- The gui style to use for the fg highlight group.
        bg = "BOLD", -- The gui style to use for the bg highlight group.
      },
      merge_keywords = true, -- when true, custom keywords will be merged with the defaults
      -- highlighting of the line containing the todo comment
      -- * before: highlights before the keyword (typically comment characters)
      -- * keyword: highlights of the keyword
      -- * after: highlights after the keyword (todo text)
      highlight = {
        before = "", -- "fg" or "bg" or empty
        keyword = "wide", -- "fg", "bg", "wide", "wide_bg", "wide_fg" or empty. (wide and wide_bg is the same as bg, but will also highlight surrounding characters, wide_fg acts accordingly but with fg)
        after = "fg", -- "fg" or "bg" or empty
        pattern = [[.*<(KEYWORDS)\s*:]], -- pattern or table of patterns, used for highlightng (vim regex)
        comments_only = true, -- uses treesitter to match keywords in comments only
        max_line_len = 400, -- ignore lines longer than this
        exclude = {}, -- list of file types to exclude highlighting
      },
      -- list of named colors where we try to extract the guifg from the
      -- list of highlight groups or use the hex color if hl not found as a fallback
      colors = {
        error = { "DiagnosticError", "ErrorMsg", "#DC2626" },
        warning = { "DiagnosticWarning", "WarningMsg", "#FBBF24" },
        info = { "DiagnosticInfo", "#2563EB" },
        hint = { "DiagnosticHint", "#10B981" },
        default = { "Identifier", "#7C3AED" },
        test = { "Identifier", "#FF00FF" }
      },
      search = {
        command = "rg",
        args = {
          "--color=never",
          "--no-heading",
          "--with-filename",
          "--line-number",
          "--column",
        },
        -- regex that will be used to match keywords.
        -- don't replace the (KEYWORDS) placeholder
        pattern = [[\b(KEYWORDS):]], -- ripgrep regex
        -- pattern = [[\b(KEYWORDS)\b]], -- match without the extra colon. You'll likely get false positives
      },
    }
<


JUMPING ~

Two methods are available to jump to the next/previous todo comment.

>
    vim.keymap.set("n", "]t", function()
      require("todo-comments").jump_next()
    end, { desc = "Next todo comment" })
    
    vim.keymap.set("n", "[t", function()
      require("todo-comments").jump_prev()
    end, { desc = "Previous todo comment" })
    
    -- You can also specify a list of valid jump keywords
    
    vim.keymap.set("n", "]t", function()
      require("todo-comments").jump_next({keywords = { "ERROR", "WARNING" }})
    end, { desc = "Next error/warning todo comment" })
<


üöÄ USAGE                                          *todo-comments-üöÄ-usage*

**Todo** matches on any text that starts with one of your defined keywords (or
alt) followed by a colon:


- TODO: do something
- FIX: this should be fixed
- HACK: weird code warning


Todos are highlighted in all regular files.

Each of the commands below accept the following arguments:


- `cwd` - Specify the directory to search for comments, like:


>
    :TodoTrouble cwd=~/projects/foobar
<



- `keywords` - Comma separated list of keywords to filter results by. Keywords are case-sensitive.


>
    :TodoTelescope keywords=TODO,FIX
<


üîé `:TODOQUICKFIX` ~

This uses the quickfix list to show all todos in your project.

<div class="figure">
<img src="https://user-images.githubusercontent.com/292349/118135332-bf9c2300-b3b7-11eb-9a40-1307feb27c44.png" title="fig:"/>
<p class="caption">image</p>
</div>

üîé `:TODOLOCLIST` ~

This uses the location list to show all todos in your project.

<div class="figure">
<img src="https://user-images.githubusercontent.com/292349/118135332-bf9c2300-b3b7-11eb-9a40-1307feb27c44.png" title="fig:"/>
<p class="caption">image</p>
</div>

üö¶ `:TODOTROUBLE` ~

List all project todos in trouble <https://github.com/folke/trouble.nvim>


  See screenshot at the top


üî≠ `:TODOTELESCOPE` ~

Search through all project todos with Telescope

<div class="figure">
<img src="https://user-images.githubusercontent.com/292349/118135371-ccb91200-b3b7-11eb-9002-66af3b683cf0.png" title="fig:"/>
<p class="caption">image</p>
</div>



Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
